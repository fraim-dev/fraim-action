name: 'Fraim Security'
description: 'Run Fraim AI-powered workflows on your code and upload results to GitHub Security tab'
author: 'Fraim Team'

branding:
  icon: 'shield'
  color: 'blue'

inputs:
  workflow:
    description: 'Workflow to run. Available: code, iac, risk_flagger'
    required: true

  workflow_args:
    description: 'Workflow-specific arguments. See specific workflow docs for details.'
    required: false
    default: '{}'
  
  gemini-api-key:
    description: 'Google Gemini API key for AI analysis'
    required: false

  openai-api-key:
    description: 'OpenAI API key for AI analysis (alternative to Gemini)'
    required: false

  anthropic-api-key:
    description: 'Anthropic API key for AI analysis (alternative to Gemini/OpenAI)'
    required: false

  github-token:
    description: 'GitHub token for authentication (needed if you want to request reviewers)'
    required: false

  github-app-id:
    description: 'GitHub App ID for authentication (alternative to github-token)'
    required: false

  github-app-private-key:
    description: 'GitHub App private key for authentication (alternative to github-token)'
    required: false

  model:
    description: 'AI model to use for analysis'
    required: false
    default: 'anthropic/claude-sonnet-4-20250514'
    choices:
      # Gemini Models
      - 'gemini/gemini-2.5-flash'
      - 'gemini/gemini-2.5-flash-lite-preview-06-17'
      - 'gemini/gemini-2.5-pro'
      # OpenAI Models  
      - 'openai/gpt-4.1'
      - 'openai/gpt-4.1-mini'
      - 'openai/gpt-4.1-nano'
      - 'openai/gpt-4o'
      - 'openai/gpt-4o-mini'
      - 'openai/gpt-4-turbo'
      # Anthropic Models
      - 'anthropic/claude-opus-4-1-20250805'
      - 'anthropic/claude-opus-4-20250514'
      - 'anthropic/claude-sonnet-4-20250514'
      - 'anthropic/claude-3-7-sonnet-20250219'
      - 'anthropic/claude-3-5-sonnet-20240620'

outputs:
  sarif-file:
    description: 'Path to the generated SARIF file'
    value: ${{ steps.fraim-scan.outputs.sarif-file }}
  
  results-count:
    description: 'Number of security findings'
    value: ${{ steps.fraim-scan.outputs.results-count }}

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper diff analysis

    - name: Install uv
      uses: astral-sh/setup-uv@bd01e18f51369d5a26f1651c3cb451d3417e3bba
      with:
        version: "0.7.14"
        enable-cache: false

    - name: Install Python dependencies
      shell: bash
      run: |
        cd ${{ github.action_path }}
        uv sync

    - name: Get Fraim v0.7.1.dev1
      shell: bash
      run: |
        uv tool install fraim==v0.7.1.dev1

    - name: Create GitHub App Token
      id: github-app-token
      if: ${{ inputs.github-app-id && inputs.github-app-private-key }}
      uses: actions/create-github-app-token@67018539274d69449ef7c02e8e71183d1719ab42
      with:
        app-id: ${{ inputs.github-app-id }}
        private-key: ${{ inputs.github-app-private-key }}

    - name: Run Fraim Security Scan
      id: fraim-scan
      shell: bash
      run: |
        uv run --script ${{ github.action_path }}/src/fraim.py
      env:
        GITHUB_TOKEN: ${{ steps.github-app-token.outputs.token || inputs.github-token || github.token }}
        GH_TOKEN: ${{ steps.github-app-token.outputs.token || inputs.github-token || github.token }}
        GEMINI_API_KEY: ${{ inputs.gemini-api-key }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        INPUT_MODEL: ${{ inputs.model }}
        INPUT_WORKFLOW: ${{ inputs.workflow }}
        WORKFLOW_ARGS: ${{ inputs.workflow_args }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_BASE_SHA: ${{ github.event.pull_request.base.sha }}
        GITHUB_SHA: ${{ github.sha }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_PATH: ${{ github.event_path }}

    # - name: Check if GHAS is enabled
    #   uses: actions/github-script@v7
    #   id: ghas-enabled
    #   with:
    #     script: |
    #       const response = await github.rest.repos.get({
    #         owner: '${{ github.repository }}'.split("/")[0],
    #         repo: '${{ github.repository }}'.split("/")[1]
    #       });
    #       const securityEnabled = response.data.security_and_analysis?.advanced_security?.status === 'enabled';

    #       if (!securityEnabled) {
    #         const message = 'GitHub Advanced Security is NOT enabled.';
    #         core.warning(message);
    #       }
    #       return securityEnabled;
    # - name: Upload SARIF to GitHub Security
    #   if: steps.fraim-scan.outputs.sarif-file != ''
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: ${{ steps.fraim-scan.outputs.sarif-file }}
    #     category: fraim-security-scan
    #     # Ensure proper PR annotations by specifying the commit SHA
    #     checkout_path: ${{ github.workspace }}
    #     ref: ${{ github.ref }}
    #     sha: ${{ github.sha }}
    - name: Post SARIF findings in the pull request
      if: github.event_name == 'pull_request' && steps.fraim-scan.outputs.sarif-file != ''
      shell: bash
      run: |
        uv run --script ${{ github.action_path }}/src/sarif_to_comment.py \
          --sarif-file "${{ steps.fraim-scan.outputs.sarif-file }}" \
          --repository "${{ github.repository }}" \
          --pr-number "${{ github.event.number }}" \
          --title "Fraim Security Alert"
      env:
        GITHUB_TOKEN: ${{ steps.github-app-token.outputs.token || inputs.github-token || github.token }}

    - name: Upload SARIF as artifact
      if: steps.fraim-scan.outputs.sarif-file != ''
      uses: actions/upload-artifact@v4
      with:
        name: fraim-sarif-results
        path: ${{ steps.fraim-scan.outputs.sarif-file }}
        retention-days: 30
